name: CI/CD Pipeline

# Trigger the workflow on push to the main branch
on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the latest code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 'node' # Specify your Node.js version

      # Step 3: Install dependencies
      - name: Install dependencies
        run: npm install

      # Step 4: Build the project
      - name: Build
        run: npm run build

      # Step 5: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 6: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 7: Build and push Docker image to Docker Hub
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: teslaopunix/orus_front:latest
          # Replace 'your-dockerhub-username' and 'your-repo-name' accordingly
      - name: Disable SSH Host Key Checking
        run: |
           mkdir -p ~/.ssh
           echo -e "Host *\n\tStrictHostKeyChecking no\n" >> ~/.ssh/config

      # Step 8: Deploy to EC2 via SSH
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          # Optional: Timeout in seconds
          # timeout: 30m
          script: |
            set -e  # Exit immediately if a command exits with a non-zero status

            # Pull the latest Docker image
            docker pull teslaopunix/orus_front:latest

            # Stop and remove the existing container if it exists
            docker stop orus-front || true
            docker rm orus-front || true

            # Run a new container with the latest image
            docker run -d \
              --name orus-front \
              -p 3000:3000 \
              teslaopunix/orus_front:latest

            # Remove dangling images to clean up previous images
            docker image prune -f --filter "dangling=true"

            # Optionally, remove the previous 'latest' image if you use versioned tags
            # docker images -q your-dockerhub-username/your-repo-name:latest | xargs -r docker rmi || true

            echo "Deployment completed successfully."
